(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{101:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return b})),n.d(t,"default",(function(){return l}));var a=n(3),r=n(8),o=(n(0),n(158)),c={id:"ecosystem",title:"\uc0dd\ud0dc\uacc4",description:"\uc18c\uac1c > \uc0dd\ud0dc\uacc4: Redux\uc640 \uad00\ub828\ub41c \uc778\uae30\uc788\uac70\ub098, \ucd94\ucc9c\ud558\uac70\ub098, \ud765\ubbf8\ub85c\uc6b4 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4\uc758 \ub9c1\ud06c",hide_title:!0},s={unversionedId:"introduction/ecosystem",id:"introduction/ecosystem",isDocsHomePage:!1,title:"\uc0dd\ud0dc\uacc4",description:"\uc18c\uac1c > \uc0dd\ud0dc\uacc4: Redux\uc640 \uad00\ub828\ub41c \uc778\uae30\uc788\uac70\ub098, \ucd94\ucc9c\ud558\uac70\ub098, \ud765\ubbf8\ub85c\uc6b4 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4\uc758 \ub9c1\ud06c",source:"@site/i18n/ko/docusaurus-plugin-content-docs/current/introduction/Ecosystem.md",slug:"/introduction/ecosystem",permalink:"/introduction/ecosystem",version:"current",sidebar:"docs",previous:{title:"Learning Resources",permalink:"/introduction/learning-resources"},next:{title:"\uc608\uc81c",permalink:"/introduction/examples"}},b=[{value:"Table of Contents",id:"table-of-contents",children:[]},{value:"Library Integration and Bindings",id:"library-integration-and-bindings",children:[]},{value:"Reducers",id:"reducers",children:[]},{value:"Actions",id:"actions",children:[]},{value:"Utilities",id:"utilities",children:[]},{value:"Store",id:"store",children:[]},{value:"Immutable Data",id:"immutable-data",children:[]},{value:"Side Effects",id:"side-effects",children:[]},{value:"Middleware",id:"middleware",children:[]},{value:"Entities and Collections",id:"entities-and-collections",children:[]},{value:"Component State and Encapsulation",id:"component-state-and-encapsulation",children:[]},{value:"Dev Tools",id:"dev-tools",children:[]},{value:"Testing",id:"testing",children:[]},{value:"Routing",id:"routing",children:[]},{value:"Forms",id:"forms",children:[]},{value:"Higher-Level Abstractions",id:"higher-level-abstractions",children:[]},{value:"Community Conventions",id:"community-conventions",children:[]}],i={toc:b};function l(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},i,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"\uc0dd\ud0dc\uacc4"},"\uc0dd\ud0dc\uacc4"),Object(o.b)("p",null,"Redux\ub294 \uc791\uc740 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc774\uc9c0\ub9cc, \uadf8 \ub3c4\uad6c\uc640 \ud655\uc7a5\uc758 \uc0dd\ud0dc\uacc4\uac00 \ub110\ub9ac \ud37c\uc838\ub098\uac08 \uc218 \uc788\ub3c4\ub85d \uc138\uc2ec\ud558\uac8c \uaddc\uc57d\uacfc API\ub97c \uc120\ud0dd\ud588\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ucee4\ubba4\ub2c8\ud2f0\uc5d0\uc11c\ub294 \ub2e4\uc591\ud55c \uc885\ub958\uc758 \uc560\ub4dc\uc628, \ub77c\uc774\ube0c\ub7ec\ub9ac, \ub3c4\uad6c \ub4f1\uc744 \ub9cc\ub4e4\uc5b4 \uc654\uc2b5\ub2c8\ub2e4. Redux\ub97c \uc0ac\uc6a9\ud558\uae30 \uc704\ud574 \uc774\uac83\ub4e4\uc744 \uaf2d \uc368\uc57c \ud558\ub294 \uac83\uc740 \uc544\ub2c8\uc9c0\ub9cc, \uc5ec\ub7ec\ubd84\uc758 \uc571\uc5d0\uc11c \uae30\ub2a5\uc744 \uad6c\ud604\ud558\uace0 \ubb38\uc81c\ub97c \ud574\uacb0\ud558\ub294\ub370 \ub9ce\uc740 \ub3c4\uc6c0\uc744 \uc904 \uac83\uc785\ub2c8\ub2e4."),Object(o.b)("p",null,"Redux\uc640 \uad00\ub828\ub41c \ub77c\uc774\ube0c\ub7ec\ub9ac, \uc560\ub4dc\uc628, \ub3c4\uad6c\uc5d0 \ub300\ud55c \uad11\ubc94\uc704\ud55c \ubaa9\ub85d\uc744 \ubcf4\uace0 \uc2f6\ub2e4\uba74 ",Object(o.b)("a",{parentName:"p",href:"https://github.com/markerikson/redux-ecosystem-links"},"Redux Ecosystem Links"),"\uc744 \ucc38\uace0\ud558\uc138\uc694. \ub610\ud55c ",Object(o.b)("a",{parentName:"p",href:"https://github.com/markerikson/react-redux-links"},"React/Redux Links"),"\uc5d0\ub294 React\ub098 Redux\ub97c \ubc30\uc6b0\uace0 \uc2f6\uc740 \uc0ac\ub78c\uc744 \uc704\ud55c \ud29c\ud1a0\ub9ac\uc5bc\uacfc \uc720\uc6a9\ud55c \uc790\ub8cc\ub4e4\uc774 \uc788\uc2b5\ub2c8\ub2e4."),Object(o.b)("p",null,"\uc774 \ud398\uc774\uc9c0\uc5d0\uc11c\ub294 Redux \uba54\uc778\ud14c\uc774\ub108\uac00 \uac1c\uc778\uc801\uc73c\ub85c \uc120\ud0dd\ud588\uac70\ub098, \ucee4\ubba4\ub2c8\ud2f0\uc5d0 \ub110\ub9ac \ucc44\uc6a9\ub41c \uba87 \uac00\uc9c0\ub9cc \uc18c\uac1c\ud569\ub2c8\ub2e4. \uc774 \ubaa9\ub85d\uc5d0 \uc5c6\ub294 \uac83\ub4e4\ub3c4 \uac71\uc815 \ub9d0\uace0 \uc368\ubcf4\uc138\uc694! Redux \uc0dd\ud0dc\uacc4\ub294 \uc544\uc8fc \ube60\ub974\uac8c \uc131\uc7a5\ud558\uace0 \uc788\uc73c\uba70, \uc6b0\ub9ac\uac00 \uc804\ubd80 \uc368\ubcf4\uae30\uc5d0\ub294 \uc2dc\uac04\uc774 \ubd80\uc871\ud588\uc73c\ub2c8\uae4c\uc694. \uc544\ub798 \ubaa9\ub85d\uc740 '\uac1c\ubc1c\ud300\uc774 \ucd94\ucc9c\ud55c' \ubaa9\ub85d \uc815\ub3c4\ub85c\ub9cc \ubc1b\uc544\ub4e4\uc5ec\uc8fc\uc138\uc694. Redux\uc640 \ud568\uaed8 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \uba4b\uc9c4 \ub3c4\uad6c\ub97c \ub9cc\ub4e4\uc5c8\ub2e4\uba74 \ub9dd\uc124\uc774\uc9c0 \ub9d0\uace0 \ud480 \ub9ac\ud018\uc2a4\ud2b8\ub97c \ubcf4\ub0b4\uc8fc\uc138\uc694."),Object(o.b)("h2",{id:"table-of-contents"},"Table of Contents"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"#ecosystem"},"Ecosystem"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"#table-of-contents"},"Table of Contents")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"#library-integration-and-bindings"},"Library Integration and Bindings")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"#reducers"},"Reducers"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"#reducer-combination"},"Reducer Combination")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"#reducer-composition"},"Reducer Composition")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"#higher-order-reducers"},"Higher-Order Reducers")))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"#actions"},"Actions")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"#utilities"},"Utilities")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"#store"},"Store"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"#change-subscriptions"},"Change Subscriptions")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"#batching"},"Batching")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"#persistence"},"Persistence")))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"#immutable-data"},"Immutable Data"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"#data-structures"},"Data Structures")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"#immutable-update-utilities"},"Immutable Update Utilities")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"#immutableredux-interop"},"Immutable/Redux Interop")))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"#side-effects"},"Side Effects"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"#widely-used"},"Widely Used")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"#promises"},"Promises")))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"#middleware"},"Middleware"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"#networks-and-sockets"},"Networks and Sockets")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"#async-behavior"},"Async Behavior")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"#analytics"},"Analytics")))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"#entities-and-collections"},"Entities and Collections")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"#component-state-and-encapsulation"},"Component State and Encapsulation")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"#dev-tools"},"Dev Tools"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"#debuggers-and-viewers"},"Debuggers and Viewers")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"#devtools-monitors"},"DevTools Monitors")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"#logging"},"Logging")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"#mutation-detection"},"Mutation Detection")))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"#testing"},"Testing")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"#routing"},"Routing")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"#forms"},"Forms")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"#higher-level-abstractions"},"Higher-Level Abstractions")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"#community-conventions"},"Community Conventions"))))),Object(o.b)("h2",{id:"library-integration-and-bindings"},"Library Integration and Bindings"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/reduxjs/react-redux"},"reduxjs/react-redux"))," ",Object(o.b)("br",null),"\nThe official React bindings for Redux, maintained by the Redux team"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/angular-redux/ng-redux"},"angular-redux/ng-redux"))," ",Object(o.b)("br",null),"\nAngular 1 bindings for Redux"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/ember-redux/ember-redux"},"ember-redux/ember-redux"))," ",Object(o.b)("br",null),"\nEmber bindings for Redux"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/glimmer-redux/glimmer-redux"},"glimmer-redux/glimmer-redux"))," ",Object(o.b)("br",null),"\nRedux bindings for Ember's Glimmer component engine"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/tur-nr/polymer-redux"},"tur-nr/polymer-redux"))," ",Object(o.b)("br",null),"\nRedux bindings for Polymer"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/lastmjs/redux-store-element"},"lastmjs/redux-store-element")),"\nRedux bindings for custom elements"),Object(o.b)("h2",{id:"reducers"},"Reducers"),Object(o.b)("h4",{id:"reducer-combination"},"Reducer Combination"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://gitlab.com/ryo33/combine-section-reducers"},"ryo33/combineSectionReducers"))," ",Object(o.b)("br",null),"\nAn expanded version of ",Object(o.b)("inlineCode",{parentName:"p"},"combineReducers"),", which allows passing ",Object(o.b)("inlineCode",{parentName:"p"},"state")," as a third argument to all slice reducers."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/KodersLab/topologically-combine-reducers"},"KodersLab/topologically-combine-reducers"))," ",Object(o.b)("br",null),"\nA ",Object(o.b)("inlineCode",{parentName:"p"},"combineReducers")," variation that allows defining cross-slice dependencies for ordering and data passing"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"var masterReducer = topologicallyCombineReducers(\n  { auth, users, todos },\n  // define the dependency tree\n  { auth: ['users'], todos: ['auth'] }\n)\n")),Object(o.b)("h4",{id:"reducer-composition"},"Reducer Composition"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/acdlite/reduce-reducers"},"acdlite/reduce-reducers"))," ",Object(o.b)("br",null),"\nProvides sequential composition of reducers at the same level"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"const combinedReducer = combineReducers({ users, posts, comments })\nconst rootReducer = reduceReducers(combinedReducer, otherTopLevelFeatureReducer)\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/mhelmer/redux-xforms"},"mhelmer/redux-xforms"))," ",Object(o.b)("br",null),"\nA collection of composable reducer transformers"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"const createByFilter = (predicate, mapActionToKey) =>\n  compose(\n    withInitialState({}), // inject initial state as {}\n    withFilter(predicate), // let through if action has filterName\n    updateSlice(mapActionToKey), // update a single key in the state\n    isolateSlice(mapActionToKey) // run the reducer on a single state slice\n  )\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/adrienjt/redux-data-structures"},"adrienjt/redux-data-structures"))," ",Object(o.b)("br",null),"\nReducer factory functions for common data structures: counters, maps, lists (queues, stacks), sets"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"const myCounter = counter({\n  incrementActionTypes: ['INCREMENT'],\n  decrementActionTypes: ['DECREMENT']\n})\n")),Object(o.b)("h4",{id:"higher-order-reducers"},"Higher-Order Reducers"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/omnidan/redux-undo"},"omnidan/redux-undo"))," ",Object(o.b)("br",null),"\nEffortless undo/redo and action history for your reducers"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/omnidan/redux-ignore"},"omnidan/redux-ignore"))," ",Object(o.b)("br",null),"\nIgnore redux actions by array or filter function"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/omnidan/redux-recycle"},"omnidan/redux-recycle"))," ",Object(o.b)("br",null),"\nReset the redux state on certain actions"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/ForbesLindesay/redux-optimist"},"ForbesLindesay/redux-optimist"))," ",Object(o.b)("br",null),"\nA reducer enhancer to enable type-agnostic optimistic updates"),Object(o.b)("h2",{id:"actions"},"Actions"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/reduxactions/redux-actions"},"reduxactions/redux-actions"))," ",Object(o.b)("br",null),"\nFlux Standard Action utilities for Redux"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"const increment = createAction('INCREMENT')\nconst reducer = handleActions({ [increment]: (state, action) => state + 1 }, 0)\nconst store = createStore(reducer)\nstore.dispatch(increment())\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/BerkeleyTrue/redux-create-types"},"BerkeleyTrue/redux-create-types"))," ",Object(o.b)("br",null),"\nCreates standard and async action types based on namespaces"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"export const types = createTypes(\n  ['openModal', createAsyncTypes('fetch')],\n  'app'\n)\n// { openModal : \"app.openModal\", fetch : { start : \"app.fetch.start\", complete: 'app.fetch.complete' } }\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/maxhallinan/kreighter"},"maxhallinan/kreighter"))," ",Object(o.b)("br",null),"\nGenerates action creators based on types and expected fields"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"const formatTitle = (id, title) => ({\n  id,\n  title: toTitleCase(title)\n})\nconst updateBazTitle = fromType('UPDATE_BAZ_TITLE', formatTitle)\nupdateBazTitle(1, 'foo bar baz')\n// -> { type: 'UPDATE_BAZ_TITLE', id: 1, title: 'Foo Bar Baz', }\n")),Object(o.b)("h2",{id:"utilities"},"Utilities"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/reduxjs/reselect"},"reduxjs/reselect"))," ",Object(o.b)("br",null),"\nCreates composable memoized selector functions for efficiently deriving data from the store state"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"const taxSelector = createSelector(\n  [subtotalSelector, taxPercentSelector],\n  (subtotal, taxPercent) => subtotal * (taxPercent / 100)\n)\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/paularmstrong/normalizr"},"paularmstrong/normalizr"))," ",Object(o.b)("br",null),"\nNormalizes nested JSON according to a schema"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"const user = new schema.Entity('users')\nconst comment = new schema.Entity('comments', { commenter: user })\nconst article = new schema.Entity('articles', {\n  author: user,\n  comments: [comment]\n})\nconst normalizedData = normalize(originalData, article)\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/planttheidea/selectorator"},"planttheidea/selectorator"))," ",Object(o.b)("br",null),"\nAbstractions over Reselect for common selector use cases"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"const getBarBaz = createSelector(\n  ['foo.bar', 'baz'],\n  (bar, baz) => `${bar} ${baz}`\n)\ngetBarBaz({ foo: { bar: 'a' }, baz: 'b' }) // \"a b\"\n")),Object(o.b)("h2",{id:"store"},"Store"),Object(o.b)("h4",{id:"change-subscriptions"},"Change Subscriptions"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/jprichardson/redux-watch"},"jprichardson/redux-watch"))," ",Object(o.b)("br",null),"\nWatch for state changes based on key paths or selectors"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"let w = watch(() => mySelector(store.getState()))\nstore.subscribe(\n  w((newVal, oldVal) => {\n    console.log(newval, oldVal)\n  })\n)\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/ashaffer/redux-subscribe"},"ashaffer/redux-subscribe"))," ",Object(o.b)("br",null),"\nCentralized subscriptions to state changes based on paths"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},'store.dispatch( subscribe("users.byId.abcd", "subscription1", () => {} );\n')),Object(o.b)("h4",{id:"batching"},"Batching"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/tappleby/redux-batched-subscribe"},"tappleby/redux-batched-subscribe"))," ",Object(o.b)("br",null),"\nStore enhancer that can debounce subscription notifications"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"const debounceNotify = _.debounce(notify => notify())\nconst store = createStore(\n  reducer,\n  initialState,\n  batchedSubscribe(debounceNotify)\n)\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/manaflair/redux-batch"},"manaflair/redux-batch"))," ",Object(o.b)("br",null),"\nStore enhancer that allows dispatching arrays of actions"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"const store = createStore(reducer, reduxBatch)\nstore.dispatch([{ type: 'INCREMENT' }, { type: 'INCREMENT' }])\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/laysent/redux-batch-actions-enhancer"},"laysent/redux-batch-actions-enhancer"))," ",Object(o.b)("br",null),"\nStore enhancer that accepts batched actions"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"const store = createStore(reducer, initialState, batch().enhancer)\nstore.dispatch(createAction({ type: 'INCREMENT' }, { type: 'INCREMENT' }))\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/tshelburne/redux-batched-actions"},"tshelburne/redux-batched-actions"))," ",Object(o.b)("br",null),"\nHigher-order reducer that handles batched actions"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"const store = createStore(enableBatching(reducer), initialState)\nstore.dispatch(batchActions([{ type: 'INCREMENT' }, { type: 'INCREMENT' }]))\n")),Object(o.b)("h4",{id:"persistence"},"Persistence"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/rt2zz/redux-persist"},"rt2zz/redux-persist"))," ",Object(o.b)("br",null),"\nPersist and rehydrate a Redux store, with many extensible options"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"const store = createStore(reducer, autoRehydrate())\npersistStore(store)\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/react-stack/redux-storage"},"react-stack/redux-storage"))," ",Object(o.b)("br",null),"\nPersistence layer for Redux with flexible backends"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"const reducer = storage.reducer(combineReducers(reducers))\nconst engine = createEngineLocalStorage('my-save-key')\nconst storageMiddleware = storage.createMiddleware(engine)\nconst store = createStore(reducer, applyMiddleware(storageMiddleware))\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/redux-offline/redux-offline"},"redux-offline/redux-offline"))," ",Object(o.b)("br",null),"\nPersistent store for Offline-First apps, with support for optimistic UIs"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"const store = createStore(reducer, offline(offlineConfig))\nstore.dispatch({\n  type: 'FOLLOW_USER_REQUEST',\n  meta: { offline: { effect: {}, commit: {}, rollback: {} } }\n})\n")),Object(o.b)("h2",{id:"immutable-data"},"Immutable Data"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/immerjs/immer"},"ImmerJS/immer"))," ",Object(o.b)("br",null),"\nImmutable updates with normal mutative code, using Proxies"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"const nextState = produce(baseState, draftState => {\n  draftState.push({ todo: 'Tweet about it' })\n  draftState[1].done = true\n})\n")),Object(o.b)("h2",{id:"side-effects"},"Side Effects"),Object(o.b)("h4",{id:"widely-used"},"Widely Used"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/gaearon/redux-thunk"},"gaearon/redux-thunk"))," ",Object(o.b)("br",null),"\nDispatch functions, which are called and given ",Object(o.b)("inlineCode",{parentName:"p"},"dispatch")," and ",Object(o.b)("inlineCode",{parentName:"p"},"getState")," as parameters. This acts as a loophole for AJAX calls and other async behavior."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Best for"),": getting started, simple async and complex synchronous logic."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},'function fetchData(someValue) {\n    return (dispatch, getState) => {\n        dispatch({type : "REQUEST_STARTED"});\n\n        myAjaxLib.post("/someEndpoint", {data : someValue})\n            .then(response => dispatch({type : "REQUEST_SUCCEEDED", payload : response})\n            .catch(error => dispatch({type : "REQUEST_FAILED", error : error});\n    };\n}\n\nfunction addTodosIfAllowed(todoText) {\n    return (dispatch, getState) => {\n        const state = getState();\n\n        if(state.todos.length < MAX_TODOS) {\n            dispatch({type : "ADD_TODO", text : todoText});\n        }\n    }\n}\n')),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/redux-saga/redux-saga"},"redux-saga/redux-saga"))," ",Object(o.b)("br",null),'\nHandle async logic using synchronous-looking generator functions. Sagas return descriptions of effects, which are executed by the saga middleware, and act like "background threads" for JS applications.'),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Best for"),": complex async logic, decoupled workflows"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"function* fetchData(action) {\n  const { someValue } = action\n  try {\n    const response = yield call(myAjaxLib.post, '/someEndpoint', {\n      data: someValue\n    })\n    yield put({ type: 'REQUEST_SUCCEEDED', payload: response })\n  } catch (error) {\n    yield put({ type: 'REQUEST_FAILED', error: error })\n  }\n}\n\nfunction* addTodosIfAllowed(action) {\n  const { todoText } = action\n  const todos = yield select(state => state.todos)\n\n  if (todos.length < MAX_TODOS) {\n    yield put({ type: 'ADD_TODO', text: todoText })\n  }\n}\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/redux-observable/redux-observable"},"redux-observable/redux-observable"))),Object(o.b)("p",null,'Handle async logic using RxJS observable chains called "epics".\nCompose and cancel async actions to create side effects and more.'),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Best for"),": complex async logic, decoupled workflows"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"const loginRequestEpic = action$ =>\n  action$\n    .ofType(LOGIN_REQUEST)\n    .mergeMap(({ payload: { username, password } }) =>\n      Observable.from(postLogin(username, password))\n        .map(loginSuccess)\n        .catch(loginFailure)\n    )\n\nconst loginSuccessfulEpic = action$ =>\n  action$\n    .ofType(LOGIN_SUCCESS)\n    .delay(2000)\n    .mergeMap(({ payload: { msg } }) => showMessage(msg))\n\nconst rootEpic = combineEpics(loginRequestEpic, loginSuccessfulEpic)\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/redux-loop/redux-loop"},"redux-loop/redux-loop"))),Object(o.b)("p",null,"A port of the Elm Architecture to Redux that allows you to sequence your effects naturally and purely by returning them from your reducers. Reducers now return both a state value and a side effect description."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Best for"),": trying to be as much like Elm as possible in Redux+JS"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"export const reducer = (state = {}, action) => {\n  switch (action.type) {\n    case ActionType.LOGIN_REQUEST:\n      const { username, password } = action.payload\n      return loop(\n        { pending: true },\n        Effect.promise(loginPromise, username, password)\n      )\n    case ActionType.LOGIN_SUCCESS:\n      const { user, msg } = action.payload\n      return loop(\n        { pending: false, user },\n        Effect.promise(delayMessagePromise, msg, 2000)\n      )\n    case ActionType.LOGIN_FAILURE:\n      return { pending: false, err: action.payload }\n    default:\n      return state\n  }\n}\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/jeffbski/redux-logic"},"jeffbski/redux-logic"))),Object(o.b)("p",null,"Side effects lib built with observables, but allows use of callbacks, promises, async/await, or observables. Provides declarative processing of actions."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Best for"),": very decoupled async logic"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"const loginLogic = createLogic({\n  type: Actions.LOGIN_REQUEST,\n\n  process({ getState, action }, dispatch, done) {\n    const { username, password } = action.payload\n\n    postLogin(username, password)\n      .then(\n        ({ user, msg }) => {\n          dispatch(loginSucceeded(user))\n\n          setTimeout(() => dispatch(showMessage(msg)), 2000)\n        },\n        err => dispatch(loginFailure(err))\n      )\n      .then(done)\n  }\n})\n")),Object(o.b)("h4",{id:"promises"},"Promises"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/acdlite/redux-promise"},"acdlite/redux-promise"))," ",Object(o.b)("br",null),"\nDispatch promises as action payloads, and have FSA-compliant actions dispatched as the promise resolves or rejects."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"dispatch({ type: 'FETCH_DATA', payload: myAjaxLib.get('/data') })\n// will dispatch either {type : \"FETCH_DATA\", payload : response} if resolved,\n// or dispatch {type : \"FETCH_DATA\", payload : error, error : true} if rejected\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/lelandrichardson/redux-pack"},"lelandrichardson/redux-pack"))," ",Object(o.b)("br",null),"\nSensible, declarative, convention-based promise handling that guides users in a good direction without exposing the full power of dispatch."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},'dispatch({type : "FETCH_DATA", payload : myAjaxLib.get("/data") });\n\n// in a reducer:\n        case "FETCH_DATA": =\n            return handle(state, action, {\n                start: prevState => ({\n                  ...prevState,\n                  isLoading: true,\n                  fooError: null\n                }),\n                finish: prevState => ({ ...prevState, isLoading: false }),\n                failure: prevState => ({ ...prevState, fooError: payload }),\n                success: prevState => ({ ...prevState, foo: payload }),\n            });\n')),Object(o.b)("h2",{id:"middleware"},"Middleware"),Object(o.b)("h4",{id:"networks-and-sockets"},"Networks and Sockets"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/svrcekmichal/redux-axios-middleware"},"svrcekmichal/redux-axios-middleware"))," ",Object(o.b)("br",null),"\nFetches data with Axios and dispatches start/success/fail actions"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"export const loadCategories() => ({ type: 'LOAD', payload: { request : { url: '/categories'} } });\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/agraboso/redux-api-middleware"},"agraboso/redux-api-middleware"))," ",Object(o.b)("br",null),"\nReads API call actions, fetches, and dispatches FSAs"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"const fetchUsers = () => ({\n  [CALL_API]: {\n    endpoint: 'http://www.example.com/api/users',\n    method: 'GET',\n    types: ['REQUEST', 'SUCCESS', 'FAILURE']\n  }\n})\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/itaylor/redux-socket.io"},"itaylor/redux-socket.io"))," ",Object(o.b)("br",null),"\nAn opinionated connector between socket.io and redux."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"const store = createStore(reducer, applyMiddleware(socketIoMiddleware))\nstore.dispatch({ type: 'server/hello', data: 'Hello!' })\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/tiberiuc/redux-react-firebase"},"tiberiuc/redux-react-firebase"))," ",Object(o.b)("br",null),"\nIntegration between Firebase, React, and Redux"),Object(o.b)("h4",{id:"async-behavior"},"Async Behavior"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/rt2zz/redux-action-buffer"},"rt2zz/redux-action-buffer"))," ",Object(o.b)("br",null),"\nBuffers all actions into a queue until a breaker condition is met, at which point the queue is released"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/wyze/redux-debounce"},"wyze/redux-debounce"))," ",Object(o.b)("br",null),"\nFSA-compliant middleware for Redux to debounce actions."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/mathieudutour/redux-queue-offline"},"mathieudutour/redux-queue-offline"))," ",Object(o.b)("br",null),"\nQueue actions when offline and dispatch them when getting back online."),Object(o.b)("h4",{id:"analytics"},"Analytics"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/rangle/redux-beacon"},"rangle/redux-beacon"))," ",Object(o.b)("br",null),"\nIntegrates with any analytics services, can track while offline, and decouples analytics logic from app logic"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/markdalgleish/redux-analytics"},"markdalgleish/redux-analytics"))," ",Object(o.b)("br",null),"\nWatches for Flux Standard Actions with meta analytics values and processes them"),Object(o.b)("h2",{id:"entities-and-collections"},"Entities and Collections"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/tommikaikkonen/redux-orm"},"tommikaikkonen/redux-orm"))," ",Object(o.b)("br",null),"\nA simple immutable ORM to manage relational data in your Redux store."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/Versent/redux-crud"},"Versent/redux-crud"))," ",Object(o.b)("br",null),"\nConvention-based actions and reducers for CRUD logic"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/kwelch/entities-reducer"},"kwelch/entities-reducer"))," ",Object(o.b)("br",null),"\nA higher-order reducer that handles data from Normalizr"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/amplitude/redux-query"},"amplitude/redux-query"))," ",Object(o.b)("br",null),"\nDeclare colocated data dependencies with your components, run queries when components mount, perform optimistic updates, and trigger server changes with Redux actions."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/cantierecreativo/redux-bees"},"cantierecreativo/redux-bees"))," ",Object(o.b)("br",null),"\nDeclarative JSON-API interaction that normalizes data, with a React HOC that can run queries"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/GetAmbassador/redux-clerk"},"GetAmbassador/redux-clerk"))," ",Object(o.b)("br",null),"\nAsync CRUD handling with normalization, optimistic updates, sync/async action creators, selectors, and an extendable reducer."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/shoutem/redux-io"},"shoutem/redux-io"))," ",Object(o.b)("br",null),"\nJSON-API abstraction with async CRUD, normalization, optimistic updates, caching, data status, and error handling."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/jmeas/redux-resource"},"jmeas/redux-resource"))," ",Object(o.b)("br",null),"\nA tiny but powerful system for managing 'resources': data that is persisted to remote servers."),Object(o.b)("h2",{id:"component-state-and-encapsulation"},"Component State and Encapsulation"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/threepointone/redux-react-local"},"threepointone/redux-react-local"))," ",Object(o.b)("br",null),"\nLocal component state in Redux, with handling for component actions"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"@local({\n  ident: 'counter', initial: 0, reducer : (state, action) => action.me ? state + 1 : state }\n})\nclass Counter extends React.Component {\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/epeli/lean-redux"},"epeli/lean-redux"))," ",Object(o.b)("br",null),"\nMakes component state in Redux as easy as setState"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},'const DynamicCounters = connectLean(\n    scope: "dynamicCounters",\n    getInitialState() => ({counterCount : 1}),\n    addCounter, removeCounter\n)(CounterList);\n')),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/DataDog/redux-doghouse"},"DataDog/redux-doghouse"))," ",Object(o.b)("br",null),"\nAims to make reusable components easier to build with Redux by scoping actions and reducers to a particular instance of a component."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"const scopeableActions = new ScopedActionFactory(actionCreators)\nconst actionCreatorsScopedToA = scopeableActions.scope('a')\nactionCreatorsScopedToA.foo('bar') //{ type: SET_FOO, value: 'bar', scopeID: 'a' }\n\nconst boundScopeableActions = bindScopedActionFactories(\n  scopeableActions,\n  store.dispatch\n)\nconst scopedReducers = scopeReducers(reducers)\n")),Object(o.b)("h2",{id:"dev-tools"},"Dev Tools"),Object(o.b)("h4",{id:"debuggers-and-viewers"},"Debuggers and Viewers"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/reduxjs/redux-devtools"},"reduxjs/redux-devtools"))),Object(o.b)("p",null,"Dan Abramov's original Redux DevTools implementation, built for in-app display of state and time-travel debugging"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/zalmoxisus/redux-devtools-extension"},"zalmoxisus/redux-devtools-extension"))),Object(o.b)("p",null,"Mihail Diordiev's browser extension, which bundles multiple state monitor views and adds integration with the browser's own dev tools"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/infinitered/reactotron"},"infinitered/reactotron"))),Object(o.b)("p",null,"A cross-platform Electron app for inspecting React and React Native apps, including app state, API requests, perf, errors, sagas, and action dispatching."),Object(o.b)("h4",{id:"devtools-monitors"},"DevTools Monitors"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/reduxjs/redux-devtools/tree/master/packages/redux-devtools-log-monitor"},"Log Monitor"))," ",Object(o.b)("br",null),"\nThe default monitor for Redux DevTools with a tree view"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/reduxjs/redux-devtools/tree/master/packages/redux-devtools-dock-monitor"},"Dock Monitor"))," ",Object(o.b)("br",null),"\nA resizable and movable dock for Redux DevTools monitors"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/calesce/redux-slider-monitor"},"Slider Monitor"))," ",Object(o.b)("br",null),"\nA custom monitor for Redux DevTools to replay recorded Redux actions"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/whetstone/redux-devtools-diff-monitor"},"Diff Monitor"))," ",Object(o.b)("br",null),"\nA monitor for Redux DevTools that diffs the Redux store mutations between actions"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/bvaughn/redux-devtools-filterable-log-monitor/"},"Filterable Log Monitor"))," ",Object(o.b)("br",null),"\nFilterable tree view monitor for Redux DevTools"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/zalmoxisus/redux-devtools-filter-actions"},"Filter Actions"))," ",Object(o.b)("br",null),"\nRedux DevTools composable monitor with the ability to filter actions"),Object(o.b)("h4",{id:"logging"},"Logging"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/evgenyrodionov/redux-logger"},"evgenyrodionov/redux-logger"))," ",Object(o.b)("br",null),"\nLogging middleware that shows actions, states, and diffs"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/inakianduaga/redux-state-history"},"inakianduaga/redux-state-history"))," ",Object(o.b)("br",null),"\nEnhancer that provides time-travel and efficient action recording capabilities, including import/export of action logs and action playback."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/joshwcomeau/redux-vcr"},"joshwcomeau/redux-vcr"))," ",Object(o.b)("br",null),"\nRecord and replay user sessions in real-time"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/socialtables/redux-unhandled-action"},"socialtables/redux-unhandled-action"))," ",Object(o.b)("br",null),"\nWarns about actions that produced no state changes in development"),Object(o.b)("h4",{id:"mutation-detection"},"Mutation Detection"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/leoasis/redux-immutable-state-invariant"},"leoasis/redux-immutable-state-invariant"))," ",Object(o.b)("br",null),"\nMiddleware that throws an error when you try to mutate your state either inside a dispatch or between dispatches."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/flexport/mutation-sentinel"},"flexport/mutation-sentinel"))," ",Object(o.b)("br",null),"\nHelps you deeply detect mutations at runtime and enforce immutability in your codebase."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/mmahalwy/redux-pure-connect"},"mmahalwy/redux-pure-connect"))," ",Object(o.b)("br",null),"\nCheck and log whether react-redux's connect method is passed ",Object(o.b)("inlineCode",{parentName:"p"},"mapState")," functions that create impure props."),Object(o.b)("h2",{id:"testing"},"Testing"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/arnaudbenard/redux-mock-store"},"arnaudbenard/redux-mock-store"))," ",Object(o.b)("br",null),"\nA mock store that saves dispatched actions in an array for assertions"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/Workable/redux-test-belt"},"Workable/redux-test-belt"))," ",Object(o.b)("br",null),"\nExtends the store API to make it easier assert, isolate, and manipulate the store"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/conorhastings/redux-test-recorder"},"conorhastings/redux-test-recorder"))," ",Object(o.b)("br",null),"\nMiddleware to automatically generate reducers tests based on actions in the app"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/wix/redux-testkit"},"wix/redux-testkit"))," ",Object(o.b)("br",null),"\nComplete and opinionated testkit for testing Redux projects (reducers, selectors, actions, thunks)"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/jfairbank/redux-saga-test-plan"},"jfairbank/redux-saga-test-plan"))," ",Object(o.b)("br",null),"\nMakes integration and unit testing of sagas a breeze"),Object(o.b)("h2",{id:"routing"},"Routing"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/supasate/connected-react-router"},"supasate/connected-react-router")),"\nSynchronize React Router 4 state with your Redux store."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/faceyspacey/redux-first-router"},"faceyspacey/redux-first-router"))," ",Object(o.b)("br",null),"\nSeamless Redux-first routing. Think of your app in states, not routes, not components, while keeping the address bar in sync. Everything is state. Connect your components and just dispatch flux standard actions."),Object(o.b)("h2",{id:"forms"},"Forms"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/erikras/redux-form"},"erikras/redux-form"))," ",Object(o.b)("br",null),"\nA full-featured library to enable a React HTML form to store its state in Redux."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/davidkpiano/react-redux-form"},"davidkpiano/react-redux-form"))," ",Object(o.b)("br",null),"\nReact Redux Form is a collection of reducer creators and action creators that make implementing even the most complex and custom forms with React and Redux simple and performant."),Object(o.b)("h2",{id:"higher-level-abstractions"},"Higher-Level Abstractions"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/keajs/kea"},"keajs/kea"))," ",Object(o.b)("br",null),"\nAn abstraction over Redux, Redux-Saga and Reselect. Provides a framework for your app\u2019s actions, reducers, selectors and sagas. It empowers Redux, making it as simple to use as setState. It reduces boilerplate and redundancy, while retaining composability."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/TheComfyChair/redux-scc"},"TheComfyChair/redux-scc"))," ",Object(o.b)("br",null),"\nTakes a defined structure and uses 'behaviors' to create a set of actions, reducer responses and selectors."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/Bloomca/redux-tiles"},"Bloomca/redux-tiles"))," ",Object(o.b)("br",null),"\nProvides minimal abstraction on top of Redux, to allow easy composability, easy async requests, and sane testability."),Object(o.b)("h2",{id:"community-conventions"},"Community Conventions"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/acdlite/flux-standard-action"},"Flux Standard Action"))," ",Object(o.b)("br",null),"\nA human-friendly standard for Flux action objects"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/gajus/canonical-reducer-composition"},"Canonical Reducer Composition"))," ",Object(o.b)("br",null),"\nAn opinionated standard for nested reducer composition"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://github.com/erikras/ducks-modular-redux"},"Ducks: Redux Reducer Bundles"))," ",Object(o.b)("br",null),"\nA proposal for bundling reducers, action types and actions"))}l.isMDXComponent=!0},158:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function b(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=r.a.createContext({}),l=function(e){var t=r.a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return r.a.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,i=b(e,["components","mdxType","originalType","parentName"]),u=l(n),d=a,m=u["".concat(c,".").concat(d)]||u[d]||p[d]||o;return n?r.a.createElement(m,s(s({ref:t},i),{},{components:n})):r.a.createElement(m,s({ref:t},i))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,c=new Array(o);c[0]=d;var s={};for(var b in t)hasOwnProperty.call(t,b)&&(s[b]=t[b]);s.originalType=e,s.mdxType="string"==typeof e?e:a,c[1]=s;for(var i=2;i<o;i++)c[i]=n[i];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);