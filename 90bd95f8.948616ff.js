(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{109:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return a})),t.d(n,"rightToc",(function(){return d})),t.d(n,"default",(function(){return p}));var r=t(2),o=t(6),s=(t(0),t(149)),i={id:"example-reddit-api",title:"\uc608\uc81c: Reddit API",description:"\uc2ec\ud654 \uac15\uc88c > Reddit API: Source code for the Reddit example app",hide_title:!0},a={unversionedId:"advanced/example-reddit-api",id:"advanced/example-reddit-api",isDocsHomePage:!1,title:"\uc608\uc81c: Reddit API",description:"\uc2ec\ud654 \uac15\uc88c > Reddit API: Source code for the Reddit example app",source:"@site/../docs_kr/advanced/ExampleRedditAPI.md",slug:"/advanced/example-reddit-api",permalink:"/advanced/example-reddit-api",version:"current",sidebar:"docs",previous:{title:"React Router\uc640 \ud568\uaed8 \uc0ac\uc6a9\ud558\uae30",permalink:"/advanced/usage-with-react-router"},next:{title:"Next Steps",permalink:"/advanced/next-steps"}},d=[{value:"Entry Point",id:"entry-point",children:[]},{value:"Action Creators and Constants",id:"action-creators-and-constants",children:[]},{value:"Reducers",id:"reducers",children:[]},{value:"Store",id:"store",children:[]},{value:"Smart Components",id:"smart-components",children:[]},{value:"Dumb Components",id:"dumb-components",children:[]}],c={rightToc:d};function p(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(s.b)("wrapper",Object(r.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(s.b)("h1",{id:"\uc608\uc81c-reddit-api"},"\uc608\uc81c: Reddit API"),Object(s.b)("p",null,Object(s.b)("a",Object(r.a)({parentName:"p"},{href:"/advanced/advanced-tutorial"}),"\uc2ec\ud654 \uac15\uc88c"),"\uc5d0\uc11c \ub9cc\ub4e4\uc5c8\ub358 Reddit \ud5e4\ub4dc\ub77c\uc778 \uac00\uc838\uc624\uae30 \uc608\uc81c\uc758 \uc804\uccb4 \uc18c\uc2a4\ucf54\ub4dc\uc785\ub2c8\ub2e4."),Object(s.b)("h2",{id:"entry-point"},"Entry Point"),Object(s.b)("h4",{id:"indexjs"},Object(s.b)("inlineCode",{parentName:"h4"},"index.js")),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"import 'babel-core/polyfill'\n\nimport React from 'react'\nimport Root from './containers/Root'\n\nReact.render(<Root />, document.getElementById('root'))\n")),Object(s.b)("h2",{id:"action-creators-and-constants"},"Action Creators and Constants"),Object(s.b)("h4",{id:"actionsjs"},Object(s.b)("inlineCode",{parentName:"h4"},"actions.js")),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"import fetch from 'isomorphic-fetch'\n\nexport const REQUEST_POSTS = 'REQUEST_POSTS'\nexport const RECEIVE_POSTS = 'RECEIVE_POSTS'\nexport const SELECT_REDDIT = 'SELECT_REDDIT'\nexport const INVALIDATE_REDDIT = 'INVALIDATE_REDDIT'\n\nexport function selectReddit(reddit) {\n  return {\n    type: SELECT_REDDIT,\n    reddit\n  }\n}\n\nexport function invalidateReddit(reddit) {\n  return {\n    type: INVALIDATE_REDDIT,\n    reddit\n  }\n}\n\nfunction requestPosts(reddit) {\n  return {\n    type: REQUEST_POSTS,\n    reddit\n  }\n}\n\nfunction receivePosts(reddit, json) {\n  return {\n    type: RECEIVE_POSTS,\n    reddit,\n    posts: json.data.children.map(child => child.data),\n    receivedAt: Date.now()\n  }\n}\n\nfunction fetchPosts(reddit) {\n  return dispatch => {\n    dispatch(requestPosts(reddit))\n    return fetch(`http://www.reddit.com/r/${reddit}.json`)\n      .then(req => req.json())\n      .then(json => dispatch(receivePosts(reddit, json)))\n  }\n}\n\nfunction shouldFetchPosts(state, reddit) {\n  const posts = state.postsByReddit[reddit]\n  if (!posts) {\n    return true\n  } else if (posts.isFetching) {\n    return false\n  } else {\n    return posts.didInvalidate\n  }\n}\n\nexport function fetchPostsIfNeeded(reddit) {\n  return (dispatch, getState) => {\n    if (shouldFetchPosts(getState(), reddit)) {\n      return dispatch(fetchPosts(reddit))\n    }\n  }\n}\n")),Object(s.b)("h2",{id:"reducers"},"Reducers"),Object(s.b)("h4",{id:"reducersjs"},Object(s.b)("inlineCode",{parentName:"h4"},"reducers.js")),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"import { combineReducers } from 'redux'\nimport {\n  SELECT_REDDIT,\n  INVALIDATE_REDDIT,\n  REQUEST_POSTS,\n  RECEIVE_POSTS\n} from './actions'\n\nfunction selectedReddit(state = 'reactjs', action) {\n  switch (action.type) {\n    case SELECT_REDDIT:\n      return action.reddit\n    default:\n      return state\n  }\n}\n\nfunction posts(\n  state = {\n    isFetching: false,\n    didInvalidate: false,\n    items: []\n  },\n  action\n) {\n  switch (action.type) {\n    case INVALIDATE_REDDIT:\n      return Object.assign({}, state, {\n        didInvalidate: true\n      })\n    case REQUEST_POSTS:\n      return Object.assign({}, state, {\n        isFetching: true,\n        didInvalidate: false\n      })\n    case RECEIVE_POSTS:\n      return Object.assign({}, state, {\n        isFetching: false,\n        didInvalidate: false,\n        items: action.posts,\n        lastUpdated: action.receivedAt\n      })\n    default:\n      return state\n  }\n}\n\nfunction postsByReddit(state = {}, action) {\n  switch (action.type) {\n    case INVALIDATE_REDDIT:\n    case RECEIVE_POSTS:\n    case REQUEST_POSTS:\n      return Object.assign({}, state, {\n        [action.reddit]: posts(state[action.reddit], action)\n      })\n    default:\n      return state\n  }\n}\n\nconst rootReducer = combineReducers({\n  postsByReddit,\n  selectedReddit\n})\n\nexport default rootReducer\n")),Object(s.b)("h2",{id:"store"},"Store"),Object(s.b)("h4",{id:"configurestorejs"},Object(s.b)("inlineCode",{parentName:"h4"},"configureStore.js")),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"import { createStore, applyMiddleware } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport createLogger from 'redux-logger'\nimport rootReducer from './reducers'\n\nconst loggerMiddleware = createLogger()\n\nconst createStoreWithMiddleware = applyMiddleware(\n  thunkMiddleware,\n  loggerMiddleware\n)(createStore)\n\nexport default function configureStore(initialState) {\n  return createStoreWithMiddleware(rootReducer, initialState)\n}\n")),Object(s.b)("h2",{id:"smart-components"},"Smart Components"),Object(s.b)("h4",{id:"containersrootjs"},Object(s.b)("inlineCode",{parentName:"h4"},"containers/Root.js")),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"import React, { Component } from 'react'\nimport { Provider } from 'react-redux'\nimport configureStore from '../configureStore'\nimport AsyncApp from './AsyncApp'\n\nconst store = configureStore()\n\nexport default class Root extends Component {\n  render() {\n    return <Provider store={store}>{() => <AsyncApp />}</Provider>\n  }\n}\n")),Object(s.b)("h4",{id:"containersasyncappjs"},Object(s.b)("inlineCode",{parentName:"h4"},"containers/AsyncApp.js")),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"import React, { Component, PropTypes } from 'react'\nimport { connect } from 'react-redux'\nimport { selectReddit, fetchPostsIfNeeded, invalidateReddit } from '../actions'\nimport Picker from '../components/Picker'\nimport Posts from '../components/Posts'\n\nclass AsyncApp extends Component {\n  constructor(props) {\n    super(props)\n    this.handleChange = this.handleChange.bind(this)\n    this.handleRefreshClick = this.handleRefreshClick.bind(this)\n  }\n\n  componentDidMount() {\n    const { dispatch, selectedReddit } = this.props\n    dispatch(fetchPostsIfNeeded(selectedReddit))\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.selectedReddit !== this.props.selectedReddit) {\n      const { dispatch, selectedReddit } = nextProps\n      dispatch(fetchPostsIfNeeded(selectedReddit))\n    }\n  }\n\n  handleChange(nextReddit) {\n    this.props.dispatch(selectReddit(nextReddit))\n  }\n\n  handleRefreshClick(e) {\n    e.preventDefault()\n\n    const { dispatch, selectedReddit } = this.props\n    dispatch(invalidateReddit(selectedReddit))\n    dispatch(fetchPostsIfNeeded(selectedReddit))\n  }\n\n  render() {\n    const { selectedReddit, posts, isFetching, lastUpdated } = this.props\n    return (\n      <div>\n        <Picker\n          value={selectedReddit}\n          onChange={this.handleChange}\n          options={['reactjs', 'frontend']}\n        />\n        <p>\n          {lastUpdated && (\n            <span>\n              Last updated at {new Date(lastUpdated).toLocaleTimeString()}.{' '}\n            </span>\n          )}\n          {!isFetching && (\n            <a href=\"#\" onClick={this.handleRefreshClick}>\n              Refresh\n            </a>\n          )}\n        </p>\n        {isFetching && posts.length === 0 && <h2>Loading...</h2>}\n        {!isFetching && posts.length === 0 && <h2>Empty.</h2>}\n        {posts.length > 0 && (\n          <div style={{ opacity: isFetching ? 0.5 : 1 }}>\n            <Posts posts={posts} />\n          </div>\n        )}\n      </div>\n    )\n  }\n}\n\nAsyncApp.propTypes = {\n  selectedReddit: PropTypes.string.isRequired,\n  posts: PropTypes.array.isRequired,\n  isFetching: PropTypes.bool.isRequired,\n  lastUpdated: PropTypes.number,\n  dispatch: PropTypes.func.isRequired\n}\n\nfunction mapStateToProps(state) {\n  const { selectedReddit, postsByReddit } = state\n  const { isFetching, lastUpdated, items: posts } = postsByReddit[\n    selectedReddit\n  ] || {\n    isFetching: true,\n    items: []\n  }\n\n  return {\n    selectedReddit,\n    posts,\n    isFetching,\n    lastUpdated\n  }\n}\n\nexport default connect(mapStateToProps)(AsyncApp)\n")),Object(s.b)("h2",{id:"dumb-components"},"Dumb Components"),Object(s.b)("h4",{id:"componentspickerjs"},Object(s.b)("inlineCode",{parentName:"h4"},"components/Picker.js")),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"import React, { Component, PropTypes } from 'react'\n\nexport default class Picker extends Component {\n  render() {\n    const { value, onChange, options } = this.props\n\n    return (\n      <span>\n        <h1>{value}</h1>\n        <select onChange={e => onChange(e.target.value)} value={value}>\n          {options.map(option => (\n            <option value={option} key={option}>\n              {option}\n            </option>\n          ))}\n        </select>\n      </span>\n    )\n  }\n}\n\nPicker.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired\n}\n")),Object(s.b)("h4",{id:"componentspostsjs"},Object(s.b)("inlineCode",{parentName:"h4"},"components/Posts.js")),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"import React, { PropTypes, Component } from 'react'\n\nexport default class Posts extends Component {\n  render() {\n    return (\n      <ul>\n        {this.props.posts.map((post, i) => (\n          <li key={i}>{post.title}</li>\n        ))}\n      </ul>\n    )\n  }\n}\n\nPosts.propTypes = {\n  posts: PropTypes.array.isRequired\n}\n")))}p.isMDXComponent=!0},149:function(e,n,t){"use strict";t.d(n,"a",(function(){return l})),t.d(n,"b",(function(){return h}));var r=t(0),o=t.n(r);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=o.a.createContext({}),p=function(e){var n=o.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},l=function(e){var n=p(e.components);return o.a.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},m=o.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,c=d(e,["components","mdxType","originalType","parentName"]),l=p(t),m=r,h=l["".concat(i,".").concat(m)]||l[m]||u[m]||s;return t?o.a.createElement(h,a(a({ref:n},c),{},{components:t})):o.a.createElement(h,a({ref:n},c))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,i=new Array(s);i[0]=m;var a={};for(var d in n)hasOwnProperty.call(n,d)&&(a[d]=n[d]);a.originalType=e,a.mdxType="string"==typeof e?e:r,i[1]=a;for(var c=2;c<s;c++)i[c]=t[c];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"}}]);