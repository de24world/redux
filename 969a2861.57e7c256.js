(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{114:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return o})),t.d(n,"rightToc",(function(){return d})),t.d(n,"default",(function(){return u}));var r=t(2),c=t(6),a=(t(0),t(149)),i={id:"code-splitting",title:"Code Splitting",hide_title:!0},o={unversionedId:"recipes/code-splitting",id:"recipes/code-splitting",isDocsHomePage:!1,title:"Code Splitting",description:"Code Splitting",source:"@site/../docs_kr/recipes/CodeSplitting.md",slug:"/recipes/code-splitting",permalink:"/recipes/code-splitting",version:"current",sidebar:"docs",previous:{title:"Using Immutable.JS with Redux",permalink:"/recipes/using-immutablejs-with-redux"},next:{title:"\ubb38\uc81c\ud574\uacb0",permalink:"/recipes/troubleshooting"}},d=[{value:"Basic Principle",id:"basic-principle",children:[{value:"Using <code>replaceReducer</code>",id:"using-replacereducer",children:[]}]},{value:"Reducer Injection Approaches",id:"reducer-injection-approaches",children:[{value:"Defining an <code>injectReducer</code> function",id:"defining-an-injectreducer-function",children:[]},{value:"Using a &#39;Reducer Manager&#39;",id:"using-a-reducer-manager",children:[]}]},{value:"Libraries and Frameworks",id:"libraries-and-frameworks",children:[]}],s={rightToc:d};function u(e){var n=e.components,t=Object(c.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"code-splitting"},"Code Splitting"),Object(a.b)("p",null,"In large web applications, it is often desirable to split up the app code into multiple JS bundles that can be loaded on-demand. This strategy, called 'code splitting', helps to increase performance of your application by reducing the size of the initial JS payload that must be fetched."),Object(a.b)("p",null,"To code split with Redux, we want to be able to dynamically add reducers to the store. However, Redux really only has a single root reducer function. This root reducer is normally generated by calling ",Object(a.b)("inlineCode",{parentName:"p"},"combineReducers()")," or a similar function when the application is initialized. In order to dynamically add more reducers, we need to call that function again to re-generate the root reducer. Below, we discuss some approaches to solving this problem and reference two libraries that provide this functionality."),Object(a.b)("h2",{id:"basic-principle"},"Basic Principle"),Object(a.b)("h3",{id:"using-replacereducer"},"Using ",Object(a.b)("inlineCode",{parentName:"h3"},"replaceReducer")),Object(a.b)("p",null,"The Redux store exposes a ",Object(a.b)("inlineCode",{parentName:"p"},"replaceReducer")," function, which replaces the current active root reducer function with a new root reducer function. Calling it will swap the internal reducer function reference, and dispatch an action to help any newly-added slice reducers initialize themselves:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const newRootReducer = combineReducers({\n  existingSlice: existingSliceReducer,\n  newSlice: newSliceReducer\n})\n\nstore.replaceReducer(newRootReducer)\n")),Object(a.b)("h2",{id:"reducer-injection-approaches"},"Reducer Injection Approaches"),Object(a.b)("h3",{id:"defining-an-injectreducer-function"},"Defining an ",Object(a.b)("inlineCode",{parentName:"h3"},"injectReducer")," function"),Object(a.b)("p",null,"We will likely want to call ",Object(a.b)("inlineCode",{parentName:"p"},"store.replaceReducer()")," from anywhere in the application. Because of that, it's helpful\nto define a reusable ",Object(a.b)("inlineCode",{parentName:"p"},"injectReducer()")," function that keeps references to all of the existing slice reducers, and attach\nthat to the store instance."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"import { createStore } from 'redux'\n\n// Define the Reducers that will always be present in the application\nconst staticReducers = {\n  users: usersReducer,\n  posts: postsReducer\n}\n\n// Configure the store\nexport default function configureStore(initialState) {\n  const store = createStore(createReducer(), initialState)\n\n  // Add a dictionary to keep track of the registered async reducers\n  store.asyncReducers = {}\n\n  // Create an inject reducer function\n  // This function adds the async reducer, and creates a new combined reducer\n  store.injectReducer = (key, asyncReducer) => {\n    store.asyncReducers[key] = asyncReducer\n    store.replaceReducer(createReducer(store.asyncReducers))\n  }\n\n  // Return the modified store\n  return store\n}\n\nfunction createReducer(asyncReducers) {\n  return combineReducers({\n    ...staticReducers,\n    ...asyncReducers\n  })\n}\n")),Object(a.b)("p",null,"Now, one just needs to call ",Object(a.b)("inlineCode",{parentName:"p"},"store.injectReducer")," to add a new reducer to the store."),Object(a.b)("h3",{id:"using-a-reducer-manager"},"Using a 'Reducer Manager'"),Object(a.b)("p",null,"Another approach is to create a 'Reducer Manager' object, which keeps track of all the registered reducers and exposes a ",Object(a.b)("inlineCode",{parentName:"p"},"reduce()")," function. Consider the following example:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"export function createReducerManager(initialReducers) {\n  // Create an object which maps keys to reducers\n  const reducers = { ...initialReducers }\n\n  // Create the initial combinedReducer\n  let combinedReducer = combineReducers(reducers)\n\n  // An array which is used to delete state keys when reducers are removed\n  let keysToRemove = []\n\n  return {\n    getReducerMap: () => reducers,\n\n    // The root reducer function exposed by this object\n    // This will be passed to the store\n    reduce: (state, action) => {\n      // If any reducers have been removed, clean up their state first\n      if (keysToRemove.length > 0) {\n        state = { ...state }\n        for (let key of keysToRemove) {\n          delete state[key]\n        }\n        keysToRemove = []\n      }\n\n      // Delegate to the combined reducer\n      return combinedReducer(state, action)\n    },\n\n    // Adds a new reducer with the specified key\n    add: (key, reducer) => {\n      if (!key || reducers[key]) {\n        return\n      }\n\n      // Add the reducer to the reducer mapping\n      reducers[key] = reducer\n\n      // Generate a new combined reducer\n      combinedReducer = combineReducers(reducers)\n    },\n\n    // Removes a reducer with the specified key\n    remove: key => {\n      if (!key || !reducers[key]) {\n        return\n      }\n\n      // Remove it from the reducer mapping\n      delete reducers[key]\n\n      // Add the key to the list of keys to clean up\n      keysToRemove.push(key)\n\n      // Generate a new combined reducer\n      combinedReducer = combineReducers(reducers)\n    }\n  }\n}\n\nconst staticReducers = {\n  users: usersReducer,\n  posts: postsReducer\n}\n\nexport function configureStore(initialState) {\n  const reducerManager = createReducerManager(staticReducers)\n\n  // Create a store with the root reducer function being the one exposed by the manager.\n  const store = createStore(reducerManager.reduce, initialState)\n\n  // Optional: Put the reducer manager on the store so it is easily accessible\n  store.reducerManager = reducerManager\n}\n")),Object(a.b)("p",null,"To add a new reducer, one can now call ",Object(a.b)("inlineCode",{parentName:"p"},'store.reducerManager.add("asyncState", asyncReducer)'),"."),Object(a.b)("p",null,"To remove a reducer, one can now call ",Object(a.b)("inlineCode",{parentName:"p"},'store.reducerManager.remove("asyncState")')),Object(a.b)("h2",{id:"libraries-and-frameworks"},"Libraries and Frameworks"),Object(a.b)("p",null,"There are a few good libraries out there that can help you add the above functionality automatically:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(r.a)({parentName:"li"},{href:"https://github.com/ioof-holdings/redux-dynostore"}),Object(a.b)("inlineCode",{parentName:"a"},"redux-dynostore")),":\nProvides tools for building dynamic Redux stores, including dynamically adding reducers and sagas, and React bindings to help you add in association with components."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(r.a)({parentName:"li"},{href:"https://github.com/Microsoft/redux-dynamic-modules"}),Object(a.b)("inlineCode",{parentName:"a"},"redux-dynamic-modules")),":\nThis library introduces the concept of a 'Redux Module', which is a bundle of Redux artifacts (reducers, middleware) that should be dynamically loaded. It also exposes a React higher-order component to load 'modules' when areas of the application come online. Additionally, it has integrations with libraries like ",Object(a.b)("inlineCode",{parentName:"li"},"redux-thunk")," and ",Object(a.b)("inlineCode",{parentName:"li"},"redux-saga")," which also help dynamically load their artifacts (thunks, sagas)."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(r.a)({parentName:"li"},{href:"https://github.com/markerikson/redux-ecosystem-links/blob/master/reducers.md#dynamic-reducer-injection"}),"Redux Ecosystem Links: Reducers - Dynamic Reducer Injection"))))}u.isMDXComponent=!0},149:function(e,n,t){"use strict";t.d(n,"a",(function(){return l})),t.d(n,"b",(function(){return h}));var r=t(0),c=t.n(r);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,r,c=function(e,n){if(null==e)return{};var t,r,c={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(c[t]=e[t]);return c}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(c[t]=e[t])}return c}var s=c.a.createContext({}),u=function(e){var n=c.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},l=function(e){var n=u(e.components);return c.a.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return c.a.createElement(c.a.Fragment,{},n)}},b=c.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),l=u(t),b=r,h=l["".concat(i,".").concat(b)]||l[b]||p[b]||a;return t?c.a.createElement(h,o(o({ref:n},s),{},{components:t})):c.a.createElement(h,o({ref:n},s))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=b;var o={};for(var d in n)hasOwnProperty.call(n,d)&&(o[d]=n[d]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var s=2;s<a;s++)i[s]=t[s];return c.a.createElement.apply(null,i)}return c.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);